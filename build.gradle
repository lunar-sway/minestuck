buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = 'Progwml6 maven'
        url = 'https://dvs1.progwml6.com/files/maven/'
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = 'ModMaven'
        url = 'https://modmaven.dev'
    }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = uri("https://maven.pkg.github.com/refinedmods/refinedstorage")
        /* As of december 2021, GitHub packages requires authentication.
           The password below is a personal access token that has read access to the Refined Mods repos.
           It can be reused in other projects.
           See: https://github.community/t/download-from-github-package-registry-without-authentication/14407/38 and
                https://github.community/t/download-from-github-package-registry-without-authentication/14407/44
         */
        credentials {
            username = "anything"
            password = "\u0067hp_oGjcDFCn8jeTzIj4Ke9pLoEVtpnZMP4VQgaX"
        }
    }
    maven {
        // maven that contains infiniverse
        url "https://cubicinterpolation.net/maven/"
    }
}

version = project.getProperty('mc_ms_version')
group = 'com.mraof.minestuck'
archivesBaseName = 'Minestuck'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = "UTF-8"

minecraft {
    mappings channel: 'parchment', version: '2022.08.07-1.18.2'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Add an uuid arg if you have specified it in a relevant gradle.properties file. NOTE: Do not use the gradle.properties file in the project! (because that one is supposed to be shared among all devs) Create one in your "gradle user home" instead.
            if (project.hasProperty('mc_uuid')) {
                args '--uuid', project.getProperty('mc_uuid')
            }

            // Add an username arg if you have specified it in a relevant gradle.properties file. Note that specifying a uuid and a non-matching username (or no username specified) may cause single-player worlds to freeze up when exiting the world.
            if (project.hasProperty('mc_username')) {
                args '--username', project.getProperty('mc_username')
            }

            mods {
                minestuck {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                minestuck {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')

            forceExit false

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'minestuck', '--all', '--output', file('src/main/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0]

            mods {
                minestuck {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.getProperty('mc_forge_version')}"

	// http://dvs1.progwml6.com/files/maven
    compileOnly fg.deobf("mezz.jei:jei-${project.getProperty('mc_jei_version')}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${project.getProperty('mc_jei_version')}")
    compileOnly fg.deobf("com.refinedmods:refinedstorage:${project.getProperty('mc_refined_storage_version')}") {
        transitive false
    }

    implementation fg.deobf("software.bernie.geckolib:geckolib-${project.getProperty('mc_gecko_version')}")
    implementation fg.deobf("commoble.infiniverse:${infiniverse_branch}:${infiniverse_version}")

    compileOnly fg.deobf('com.github.glitchfiend:TerraBlender-forge:1.18.2-1.2.0.126')
}

sourceSets.main.resources {
    srcDir 'src/main/generated/resources'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "minestuck",
                "Specification-Vendor": "Minestuck Dev Team",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"Minestuck Dev Team",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}