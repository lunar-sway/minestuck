package com.mraof.minestuck.block.redstone;

import com.mraof.minestuck.block.MSDirectionalBlock;
import com.mraof.minestuck.block.MSProperties;
import com.mraof.minestuck.util.MSTags;
import net.minecraft.block.Block;
import net.minecraft.block.BlockRenderType;
import net.minecraft.block.BlockState;
import net.minecraft.block.Blocks;
import net.minecraft.state.BooleanProperty;
import net.minecraft.state.IntegerProperty;
import net.minecraft.state.StateContainer;
import net.minecraft.util.Direction;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.shapes.ISelectionContext;
import net.minecraft.util.math.shapes.VoxelShape;
import net.minecraft.util.math.shapes.VoxelShapes;
import net.minecraft.world.IBlockReader;
import net.minecraft.world.World;
import net.minecraft.world.server.ServerWorld;

import java.util.Random;

/**
 * A block generated by the tile entity of Platform Generators. They act as a quickly deployed and quick to decay physical barrier that can be seen through. Can be made invisible
 */
public class PlatformBlock extends MSDirectionalBlock
{
	public static final BooleanProperty INVISIBLE = MSProperties.MACHINE_TOGGLE;
	public static final IntegerProperty GENERATOR_DISTANCE = MSProperties.DISTANCE_1_16;
	
	public PlatformBlock(Properties properties)
	{
		super(properties);
		registerDefaultState(stateDefinition.any().setValue(INVISIBLE, false).setValue(GENERATOR_DISTANCE, 1));
	}
	
	@Override
	public float getShadeBrightness(BlockState state, IBlockReader world, BlockPos pos)
	{
		return 1.0F;
	}
	
	public VoxelShape getVisualShape(BlockState state, IBlockReader world, BlockPos pos, ISelectionContext context)
	{
		return VoxelShapes.empty();
	}
	
	@Override
	public boolean propagatesSkylightDown(BlockState state, IBlockReader world, BlockPos pos)
	{
		return true;
	}
	
	@Override
	public BlockRenderType getRenderShape(BlockState state)
	{
		if(state.getValue(INVISIBLE))
			return BlockRenderType.INVISIBLE;
		else
			return BlockRenderType.MODEL;
	}
	
	public static void updateSurvival(BlockState state, World world, BlockPos pos)
	{
		if(!world.isClientSide() && state.getBlock() instanceof PlatformBlock)
		{
			Direction stateFacing = state.getValue(FACING);
			BlockPos supportingPos = pos.relative(stateFacing.getOpposite(), state.getValue(GENERATOR_DISTANCE));
			if(world.isAreaLoaded(supportingPos, 0))
			{
				BlockState supportingState = world.getBlockState(supportingPos);
				
				for(int blockIterate = 1; blockIterate < state.getValue(GENERATOR_DISTANCE); blockIterate++)
				{
					BlockPos iteratePos = pos.relative(stateFacing.getOpposite(), blockIterate);
					BlockState iterateState = world.getBlockState(iteratePos);
					if(MSTags.Blocks.PLATFORM_ABSORBING.contains(iterateState.getBlock()) || (iterateState.getBlock() instanceof PlatformReceptacleBlock && iterateState.getValue(PlatformReceptacleBlock.ABSORBING)))
					{
						world.setBlockAndUpdate(pos, Blocks.AIR.defaultBlockState());
					}
				}
				
				if(supportingState.getBlock() instanceof PlatformGeneratorBlock && (!supportingState.getValue(PlatformGeneratorBlock.POWERED) || supportingState.getValue(PlatformGeneratorBlock.FACING) != stateFacing) || !(supportingState.getBlock() instanceof PlatformGeneratorBlock))
					world.setBlockAndUpdate(pos, Blocks.AIR.defaultBlockState());
				else if(supportingState.getBlock() instanceof PlatformGeneratorBlock && supportingState.getValue(PlatformGeneratorBlock.POWERED))
				{
					if(supportingState.getValue(PlatformGeneratorBlock.INVISIBLE_MODE) != state.getValue(INVISIBLE) && supportingState.getValue(PlatformGeneratorBlock.FACING) == stateFacing)
						world.setBlockAndUpdate(pos, state.setValue(INVISIBLE, supportingState.getValue(PlatformGeneratorBlock.INVISIBLE_MODE))); //TODO Visible platforms should override invisible ones
					if(!supportingState.getValue(PlatformGeneratorBlock.INVISIBLE_MODE) && state.getValue(INVISIBLE) && supportingState.getValue(PlatformGeneratorBlock.FACING) != stateFacing)
						world.setBlockAndUpdate(pos, state.setValue(INVISIBLE, false));
				}
			}
		}
	}
	
	@Override
	public void neighborChanged(BlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos, boolean isMoving)
	{
		super.neighborChanged(state, worldIn, pos, blockIn, fromPos, isMoving);
		updateSurvival(state, worldIn, pos);
	}
	
	@Override
	public void tick(BlockState state, ServerWorld worldIn, BlockPos pos, Random rand)
	{
		super.tick(state, worldIn, pos, rand);
		updateSurvival(state, worldIn, pos);
	}
	
	@Override
	public void onPlace(BlockState state, World worldIn, BlockPos pos, BlockState oldState, boolean isMoving)
	{
		super.onPlace(state, worldIn, pos, oldState, isMoving);
		worldIn.getBlockTicks().scheduleTick(new BlockPos(pos), this, 20);
	}
	
	@Override
	protected void createBlockStateDefinition(StateContainer.Builder<Block, BlockState> builder)
	{
		super.createBlockStateDefinition(builder);
		builder.add(INVISIBLE);
		builder.add(GENERATOR_DISTANCE);
	}
}