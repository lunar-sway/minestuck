package com.mraof.minestuck.block.redstone;

import com.mraof.minestuck.block.MSDirectionalBlock;
import com.mraof.minestuck.block.MSProperties;
import com.mraof.minestuck.util.MSTags;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.util.RandomSource;
import net.minecraft.world.level.BlockGetter;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.RenderShape;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.block.state.StateDefinition;
import net.minecraft.world.level.block.state.properties.BooleanProperty;
import net.minecraft.world.level.block.state.properties.IntegerProperty;
import net.minecraft.world.phys.shapes.CollisionContext;
import net.minecraft.world.phys.shapes.Shapes;
import net.minecraft.world.phys.shapes.VoxelShape;

/**
 * A block generated by the tile entity of Platform Generators. They act as a quickly deployed and quick to decay physical barrier that can be seen through. Can be made invisible
 */
public class PlatformBlock extends MSDirectionalBlock
{
	public static final BooleanProperty INVISIBLE = MSProperties.INVISIBLE;
	public static final IntegerProperty GENERATOR_DISTANCE = MSProperties.DISTANCE_1_16;
	
	public PlatformBlock(Properties properties)
	{
		super(properties);
		registerDefaultState(stateDefinition.any().setValue(INVISIBLE, false).setValue(GENERATOR_DISTANCE, 1));
	}
	
	@SuppressWarnings("deprecation")
	@Override
	public float getShadeBrightness(BlockState state, BlockGetter level, BlockPos pos)
	{
		return 1.0F;
	}
	
	@SuppressWarnings("deprecation")
	@Override
	public VoxelShape getVisualShape(BlockState state, BlockGetter level, BlockPos pos, CollisionContext context)
	{
		return Shapes.empty();
	}
	
	@Override
	public boolean propagatesSkylightDown(BlockState state, BlockGetter level, BlockPos pos)
	{
		return true;
	}
	
	@SuppressWarnings("deprecation")
	@Override
	public RenderShape getRenderShape(BlockState state)
	{
		if(state.getValue(INVISIBLE))
			return RenderShape.INVISIBLE;
		else
			return RenderShape.MODEL;
	}
	
	/**
	 * Using the generator distance block state and its facing,this function determines if a platform generator is still capable of refreshing this block and deletes the block if it is not supported.
	 * There must be a powered platform generator at the coordinates established by the generator distance and facing, and there must not be any blocks in the tag PLATFORM_ABSORBING or absorbing mode platform receptacles in between the platform block and its generator
	 */
	public static void updateSurvival(BlockState state, Level level, BlockPos pos)
	{
		if(!level.isClientSide() && state.getBlock() instanceof PlatformBlock)
		{
			Direction stateFacing = state.getValue(FACING);
			BlockPos supportingPos = pos.relative(stateFacing.getOpposite(), state.getValue(GENERATOR_DISTANCE));
			if(level.isAreaLoaded(supportingPos, 0))
			{
				BlockState supportingState = level.getBlockState(supportingPos);
				
				checkForAbsorbers(state, level, pos, stateFacing);
				
				boolean supportingStateIsGenerator = supportingState.getBlock() instanceof PlatformGeneratorBlock;
				boolean generatorHasSameFacing = false;
				boolean generatorHasPower = false;
				if(supportingStateIsGenerator)
				{
					generatorHasSameFacing = supportingState.getValue(PlatformGeneratorBlock.FACING) == stateFacing;
					generatorHasPower = supportingState.getValue(PlatformGeneratorBlock.POWERED);
				}
				
				if(!supportingStateIsGenerator || (!generatorHasPower || !generatorHasSameFacing))
					level.setBlockAndUpdate(pos, Blocks.AIR.defaultBlockState()); //removes platform block if there is no platform generator, or if a platform generator is there but it is either not powered or not facing the platform block
				else
				{
					boolean generatorSetToInvisible = supportingState.getValue(PlatformGeneratorBlock.INVISIBLE_MODE);
					boolean thisSetToInvisible = state.getValue(INVISIBLE);
					
					if(generatorSetToInvisible != thisSetToInvisible)
						level.setBlockAndUpdate(pos, state.setValue(INVISIBLE, generatorSetToInvisible)); //TODO Visible platforms should override invisible ones
				}
			}
		}
	}
	
	public static void checkForAbsorbers(BlockState state, Level level, BlockPos pos, Direction stateFacing)
	{
		for(int blockIterate = 1; blockIterate < state.getValue(GENERATOR_DISTANCE); blockIterate++) //looping through blocks between the platform block and its generator for absorbing kinds
		{
			BlockPos iteratePos = pos.relative(stateFacing.getOpposite(), blockIterate);
			BlockState iterateState = level.getBlockState(iteratePos);
			if(iterateState.is(MSTags.Blocks.PLATFORM_ABSORBING) ||
					(iterateState.getBlock() instanceof PlatformReceptacleBlock && iterateState.getValue(PlatformReceptacleBlock.ABSORBING)))
			{
				level.setBlockAndUpdate(pos, Blocks.AIR.defaultBlockState());
			}
		}
	}
	
	@SuppressWarnings("deprecation")
	@Override
	public void neighborChanged(BlockState state, Level level, BlockPos pos, Block blockIn, BlockPos fromPos, boolean isMoving)
	{
		super.neighborChanged(state, level, pos, blockIn, fromPos, isMoving);
		updateSurvival(state, level, pos);
	}
	
	@SuppressWarnings("deprecation")
	@Override
	public void tick(BlockState state, ServerLevel level, BlockPos pos, RandomSource rand)
	{
		super.tick(state, level, pos, rand);
		updateSurvival(state, level, pos);
	}
	
	@SuppressWarnings("deprecation")
	@Override
	public void onPlace(BlockState state, Level level, BlockPos pos, BlockState oldState, boolean isMoving)
	{
		super.onPlace(state, level, pos, oldState, isMoving);
		level.scheduleTick(new BlockPos(pos), this, 20);
	}
	
	@Override
	protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder)
	{
		super.createBlockStateDefinition(builder);
		builder.add(INVISIBLE);
		builder.add(GENERATOR_DISTANCE);
	}
}